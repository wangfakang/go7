{"name":"Go7","tagline":"goroutine wait","body":"`golang多协成的wait操作管理`  \r\n\r\n\r\n\r\nWaitGroup的用途：\r\n====\r\n  它能够一直等到所有的goroutine执行完成，并且阻塞主线程的执行，直到所有的goroutine执行完成。\r\n\r\nWaitGroup总共有三个方法：    \r\n\r\n* Add(delta int):添加或者减少等待goroutine的数量.         \r\n* Done():减少一个协成等待,相当于Add(-1).      \r\n* Wait():执行阻塞，等待所有的协成执行完成.     \r\n\r\n实列:\r\n====\r\n\r\n```c\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n\t\"sync\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\tvar wg sync.WaitGroup\r\n\r\n\tfor i := 0; i < 5; i = i + 1 {\r\n\t\twg.Add(1)\r\n\t\tgo func(n int) {\r\n\t\t\t// defer wg.Done()\r\n\t\t\tdefer wg.Add(-1)\r\n\t\t\tmygoroutine(n)\r\n\t\t}(i)\r\n\t}\r\n\r\n\twg.Wait()\r\n}\r\n\r\nfunc mygoroutine(i int) {\r\n\ttime.Sleep(2*time.Second)\r\n\tfmt.Println(i)\r\n}\r\n```\r\n\r\n输出结果：\r\n```\r\n0\r\n1\r\n2\r\n3\r\n4\r\n```\r\n   上面的demo就是一个在四个协成中输出数字,注意如果没有在主协成中进行wait操作饿话是看不到输出结果的,\r\n原因就是此时main会早于协成的结束导致当前的会话关闭.\r\n\r\n   其实除了上面这种方法来进行多协成之间的同步还可以使用chanel来进行控制.\r\n\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"goroutine wait golang多协成的wait操作管理","note":"Don't delete this file! It's used internally to help with page regeneration."}